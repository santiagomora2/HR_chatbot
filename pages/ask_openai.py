import functions_utils as fn
import streamlit as st
from openai import OpenAI
import pandas as pd
import time

##################### API KEY Google ##################
OPENAI_API_KEY = st.secrets['API_KEY']

# API key para OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

initial_prompt = """
Act√∫a como si fueras un reclutador experto en recursos humanos. Se te proporcionar√° un diccionario con informaci√≥n
de candidatos, act√∫a como si el elemento 'index' de cada candidato fuera su nombre. Se te har√° una pregunta sobre el 
posible reclutamiento de los candidatos, a lo que tu debes contestar qu√© candidatos (MENcIONANDO SU 'index') crees  ser√≠an m√°s aptos para la posici√≥n
y por qu√© crees esto. Trata de no hablar sobre cosas que no tienen nada que ver o responder preguntas que no tienen que ver con tu rol como experto en recursos humanos.
"""

df = pd.read_excel('fake_data.xlsx')
options_entities = list(df['Entidad'].unique())

def main():
    st.set_page_config(
        page_title="IA",
    )

    hide_st_style = """
            <style>
            #MainMenu {visibility: hidden;}
            header {visibility: hidden;}
            </style>
            """
    st.markdown(hide_st_style, unsafe_allow_html=True)

    st.header('Pregunta a la IA!')

    # Inicializar variables de sesi√≥n
    if 'respuesta' not in st.session_state:
        st.session_state.respuesta = ""
    if 'prev_question' not in st.session_state:
        st.session_state.prev_question = ""
    if 'entidad_sel' not in st.session_state:
        st.session_state.entidad_sel = "Ciudad de M√©xico"
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Mostrar la respuesta guardada en sesi√≥n al regresar

    st.write(st.session_state.respuesta)

    # Informaci√≥n de Protecci√≥n de Datos
    st.info('''IMPORTANTE: Por protecci√≥n de datos, la IA te dir√° a qu√© ```index``` de candidato se refiere en vez de su nombre.''', icon="‚ÑπÔ∏è")

    ############ Sidebar ############
    with st.sidebar:
        # Actualizar opciones de entidades
        options_entities.remove(st.session_state.entidad_sel)
        options_entities.insert(0, st.session_state.entidad_sel)

        # Seleccionar Entidad
        st.session_state.entidad_sel = st.selectbox(
            "Entidad Federativa:",
            options_entities,
            index=0
        )

        # Obtener opciones de ciudades seg√∫n la entidad seleccionada
        options_cities = fn.obtain_cities(st.session_state.entidad_sel, df)
        
        # Selecci√≥n de Ciudad con multiselect
        cities = st.multiselect(
            'Ciudad/Municipio',
            options=options_cities,
            default=options_cities  # Seleccionar ciudades v√°lidas o la primera opci√≥n
        )

        st.page_link("pages/explore.py", label="Explorar candidatos", icon="üë§")
        st.page_link("app.py", label="Regresar a Inicio", icon="üè†")

    ############ p√°gina principal ############
    # try, except es para si no se selecciona ninguna ciudad
    try:
        # obtener datos privados y p√∫blicos
        _, data_public = fn.obtain_candidates(cities, df)

        data_public = data_public.drop(columns='index')

        ############## pregunta ia sobre candidato ###############

        data_text_for_ai = fn.data_to_text(data_public)

        question = st.chat_input('Pregunta a la IA sobre los candidatos')

        # Solo enviar la pregunta a la IA si es diferente a la anterior
        if question and question != st.session_state.prev_question:
            prompt = f"""
            CANDIDATOS:
            {data_text_for_ai}

            PREGUNTA:
            {question}
            """
            st.session_state.prev_question = question  # Actualizar pregunta anterior
            
            # Respuesta de OpenAI como stream
            stream = client.chat.completions.create(
                model="gpt-4o-mini",  # Aseg√∫rate de usar el modelo correcto
                messages=[
                    {"role": "system", "content": initial_prompt},
                    {"role": "user", "content": prompt}
                ],
                stream=True
            )

            st.write_stream(stream)

            # Mostrar la respuesta en un stream
            for chunk in stream:
                st.session_state.respuesta += chunk  # Actualizar valor en sesi√≥n


    except IndexError:
        st.error('Por favor selecciona una ciudad/municipio', icon="üö®")


if __name__ == '__main__':
    main()
